version: '3.6'
services:
  server:
      image: mojiz/scootin-api-server:latest
      container_name: scootin-api-server
      build:
        context: ./server
        # target: test  # development | test | production (default)
      depends_on: 
        - postgres
      ports: 
        - 8080:8080
        - 2345:2345
      logging:
        driver: "json-file"
        options:
          max-size: "200k"
          max-file: "10"
      volumes:
        - ./server:/root/app
        - ./server:/go/src/app
      networks:
        - scootin
      environment:
        SERVING_ADDR: ${SERVING_ADDR:-:8080}
        STATIC_API_KEY: ${STATIC_API_KEY}
        
        REDIS_USER: ${REDIS_USER:-root}
        REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
        REDIS_HOST: ${REDIS_HOST:-redis}
        REDIS_PORT: ${REDIS_PORT:-6379}
        REDIS_DB: ${REDIS_DB:-0}

        POSTGRES_DB: ${POSTGRES_DB:-defaultdb}
        POSTGRES_USER: ${POSTGRES_USER:-root}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
        POSTGRES_PORT: ${POSTGRES_PORT:-5432}
        POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      healthcheck:
        test: curl --fail http://localhost:8080/ || exit 1
        interval: 30s
        retries: 10 # Will try for 5 minutes      
      restart: always
      security_opt:
        - "seccomp:unconfined"
    #   entrypoint: "/root/app/app"

  #----------------#

  client:
    image: mojiz/scootin-dummy-client:latest
    container_name: scootin-dummy-client
    build:
      context: ./client
      # target: development  # development | test | production (default)
    depends_on: 
      - server
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    volumes:
      - ./client:/go/src/app
    networks:
      - scootin
    environment:
      SCOOTIN_API_PATH: ${SCOOTIN_API_PATH:-http://server:8080/}
      STATIC_API_KEY: ${STATIC_API_KEY}
    restart: always
    security_opt:
      - "seccomp:unconfined"
  #   entrypoint: "/root/app/app"

#----------------#  

  # redis:
  #   image: "redis:alpine"
  #   ports:
  #    - "${REDIS_PORT:-6379}:6379"
  #   volumes:
  #    - ./data/redis-data:/var/lib/redis
  #    - ./data/redis.conf:/usr/local/etc/redis/redis.conf
  #   networks:
  #     - scootin
  #   environment:
  #    - REDIS_REPLICATION_MODE=master
  #   command: redis-server --requirepass ${REDIS_PASSWORD:-password}
  #----------------#

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-defaultdb}
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
    volumes:
      - ./data/postgres-data:/var/lib/postgresql/data
    networks:
      - scootin
    ports:
      - ${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always

  #----------------#

  # pgadmin:
  #   container_name: pgadmin
  #   image: dpage/pgadmin4
  #   depends_on: 
  #     - postgres
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   volumes:
  #      - ./pgadmin:/root/.pgadmin
  #   ports:
  #     - "${PGADMIN_PORT:-5050}:80"
  #   networks:
  #     - scootin
  #   restart: unless-stopped

  #----------------#

# volumes:
#   postgres-storage:

networks:
  scootin:
    driver: bridge